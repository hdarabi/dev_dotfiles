syntax on
filetype plugin indent on
set nocompatible
set number
set tabstop=4
set shiftwidth=4
set expandtab
set spell spelllang=en_us
set diffexpr=MyDiff()
set foldmethod=indent
set foldlevel=99
set tags=./tags.txt;,tags.txt;
colorscheme koehler
filetype off
set rtp +=~/vimfiles/bundle/Vundle.vim
let vimrplugin_r_path = 'C:\R\bin\x64\'
call vundle#begin()
Plugin 'xuhdev/SingleCompile.git'
Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'L9'
Plugin 'git://git.wincent.com/command-t.git'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'aperezdc/vim-template'
Plugin 'hdarabi/Vim-R-plugin'
Plugin 'jalvesaq/R-Vim-runtime'
Plugin 'Gundo'
Plugin 'supertab'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'ZoomWin'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'Yggdroot/indentLine'
Plugin 'Raimondi/delimitMate'
Plugin 'php.vim'
Plugin 'joonty/vim-phpqa'
Plugin 'joonty/vim-phpunitqf'
Plugin 'Shougo/vimproc.vim'
Plugin 'Shougo/vimfiler.vim'
Plugin 'Shougo/unite.vim'
Plugin 'EasyMotion'
call vundle#end()
filetype plugin indent on
let g:unite_source_history_yank_enable = 1
try
  let g:unite_source_rec_async_command = 'ag --nocolor --nogroup -g ""'
  call unite#filters#matcher_default#use(['matcher_fuzzy'])
catch
endtry
"nnoremap <space><space> :Unite -start-insert file_rec/async<cr>
"nnoremap <space>r <Plug>(unite_restart)
set guifont=Lucida_Console:h16
set hlsearch!
nnoremap <F3> :set hlsearch!<CR>
set tw=79
set formatoptions+=t
set number                      "Line numbers are good
set backspace=indent,eol,start  "Allow backspace in insert mode
set history=1000                "Store lots of :cmdline history
set showcmd                     "Show incomplete cmds down the bottom
set showmode                    "Show current mode down the bottom
set winaltkeys=yes
if has('gui_running')
  set guifont=Lucida_Console:h13
endif
let vimrplugin_assign = 0
autocmd VimEnter * echo "Hi Hamid, you are about to do an awesome work, YAY!"
set autochdir
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-D> :nohl<CR><C-l>
inoremap <expr> j pumvisible() ? "\<C-N>" : "j"
inoremap <expr> k pumvisible() ? "\<C-P>" : "k"
nnoremap Q <nop> 
nnoremap <F2> :Unite file_rec buffer<CR>
nnoremap <F3> :exec("Unite -input=".expand("<cword>")." file_rec")<CR>
" command! -nargs=1 FO execute "Unite -input=".string(<q-args>)." file_rec"
nnoremap <F5> :SCCompile<cr>
nnoremap <F7> :SCCompileRun<cr>
nnoremap <F8> :GundoToggle<CR>
nnoremap <F9> :ZoomWin<CR>
map <C-E> :NERDTreeToggle<CR>
map <C-O> :tabnew<CR>
map <C-C> :tabclose<CR>
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
"let mapleader=","
set wildmode=longest,list,full
set wildmenu
set splitbelow
set splitright
let g:templates_directory = 'c:\hamid\00git\templates'
let g:tempates_no_autocmd = 0
if (exists('+colorcolumn'))
    set colorcolumn=80
    highlight ColorColumn ctermbg=9
endif
autocmd Bufwritepre,filewritepre *.* execute "normal ma"
autocmd Bufwritepre,filewritepre *.* exe "1,10" . "g/Modified On :.*/s/Modified On :.*/Modified On : " .strftime("%Y-%m-%d")
autocmd Bufwritepre,filewritepre *.* exe "1,10" . "g/Version/norm! $h \<C-A>"
autocmd bufwritepost,filewritepost *.* execute "normal `a"
